<?xml version="1.0" encoding="US-ASCII"?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
  <!ENTITY rfc1035 PUBLIC "" "./reference.RFC.1035.xml">
  <!ENTITY rfc1995 PUBLIC "" "./reference.RFC.1995.xml">
  <!ENTITY rfc2119 PUBLIC "" "./reference.RFC.2119.xml">
  <!ENTITY rfc2845 PUBLIC "" "./reference.RFC.2845.xml">
  <!ENTITY rfc3833 PUBLIC "" "./reference.RFC.3833.xml">
  <!ENTITY rfc4034 PUBLIC "" "./reference.RFC.4034.xml">
  <!ENTITY rfc5358 PUBLIC "" "./reference.RFC.5358.xml">
]>

<rfc category="std" docName="draft-ogud-dnsop-acl-metaqueries-01"
     ipr="trust200902" updates="1035">

  <?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

  <?rfc toc="yes" ?>
  <?rfc symrefs="yes" ?>
  <?rfc sortrefs="yes"?>
  <?rfc iprnotified="no" ?>
  <?rfc strict="yes"?>
  <?rfc compact="yes" ?>

  <front>
    <title abbrev="Refusing DNS Queries of Type ANY">
      Required Behaviour for Authoritative-Only DNS Servers that
      Refuse Meta Queries 
    </title>
   <author fullname="Olafur Gudmundsson" initials="O."
      surname="Gudmundsson">
      <organization>CloudFlare Inc.</organization>
      <address>
        <postal>
          <street></street>
          <city>San Francisco</city>
          <region>CA</region>
          <code>94107</code>
          <country>USA</country>
        </postal>
        <email>olafur@cloudflare.com</email>
      </address>
    </author>

<author fullname="Paul Wouters"> 
</author> 

   <author fullname="Matthew Pounsett" initials="M."
      surname="Pounsett">
      <organization>Rightside</organization>
      <address>
        <postal>
          <street></street>
          <city>Toronto</city>
          <region>ON</region>
          <code></code>
          <country>Canada</country>
        </postal>
        <email>matt.pounsett@rightside.co</email>
      </address>
    </author>

<!-- Add your name here --> 
<date/> 
<area> NO clue</area> 
<workgroup> None</workgroup> 
<abstract> 
<t> 
	There are several problems that arise in the standard
	Registrant/Registrar/Registry model when the operator of a zone is
	neither the Registrant nor the Registrar for the delegation.  Historically
	the issues have been minor, and limited to difficulty guiding the
	Registrant through the initial changes to the NS records for the
	delegation.  As this is usually a one-off activity when the operator first
	takes charge of the zone it has not been treated as a serious issue.

	With the rise of DNSSEC it has become necessary for the Registrant in this
	situation to make regular (often annual) changes to the delegation in
	order to manage KSK rolls, by updating the delegation's DS record(s).
	Under the current model this is prone to Registrant error and significant
	delays.

	There is a need for a simple protocol which would allow a third party DNS
	operator to update DS and NS records for a delegation without involving
	the registrant in each operation.

	The protocol described in this draft is REST based, and when used through
	an authenticated channel can be used to bootstrap DNSSEC.  Once DNSSEC is
	established this channel can be used to trigger maintenance of delegation
	records such as DS, NS, and glue records.   The protocol is kept simple
	and flexible in order to accomodate different operating models.
</t>

</abstract> 
</front>


<middle> 
<section title="Introduction"> 
  <t> 
    why is this needed ? Current system does not work well
  </t> 

  <section title="Notational Conventions">
    <section title="RFC 2119 Keywords">
      <t>
	The key words "MUST", "MUST NOT", "REQUIRED", "SHALL",
	"SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and
	"OPTIONAL" in this document are to be interpreted as described
	in <xref target="RFC2119" />.
      </t>
    </section>
    
    <section title="Definitions">
      <t>
	For the purposes of this draft, a third-party DNS operator is any
	DNS operator responsible for a zone where the operator is neither
	the Registrant nor the Registrar of record for the delegation.
      </t>
    </section>
  </section>
</section> 
  <section title="Protocol"> 
    <t>
      The basic call is 
      &lt;SERVER&gt;&lt;cmd&gt;/domain/auth=""/extra-stuff 
  </t>
  <t>
    The cmd can be:
    <list style="hanging">
      <t hangText="/getDS"> install DS from CDS/CDNSKEY at domain if
      present and different from current DS set</t>
      <t hangText="/getNS">  update NS set based on the childs NS set </t>
      <t hangText="/delDS"> delete the all DS records at domain (how to authorize is a question) </t>
      <t hangText="/status"> Returns the current NS and DS + glue
	records for the domain and or any other status information</t>
    </list>
  </t>
  
  <t> 
    The commands "getDS" and "status" are required, the others a are
    RECOMMENDED. The following options to the commands are allowed
    <list style="hanging"> 
      <t hangText="auth="> an authenticaion token</t> 
      <t hangText="debug="> request a debug session </t> 
    </list>
  </t>
  
  <t>
    The basic answer is a jason blob the important parts of the blob are 
    <list style="hanging">
      <t hangText="refer:"> will contain an URI; this is an referal to
	an URI that is better able to do execute the command</t>
      <t hangText="refused:"> This command can not be executed, and
      the reason is inside the block </t> 
      <t hangText="debug:"> list of debug messages normally empty
      unless debug flag is present, this section should be ignored in
      normal processing</t>
      <t hangText="error:"> if there was one look inside debug for
      more details</t>
      <t hangText="domain:"> what domain this is an answer for this
      section MUST be included in all answers</t>
      <t hangText="rr:">  the new list of rrs "can be empty" </t>
      <t hangText="challenge:"> an RR to insert into the zone </t>
    </list>
  </t> 
  <t> If ``refer'' block is present then the client is to attempt to
  connect to that URI and retry the command there. Client SHOULD
  always honor the refer command over all other answers it gets in
  the answer.  </t> 
</section> 

<section title="Authorization"> 
  <t>
The authorization can be either based on Token (like auth code) or buy
challenge i.e. inserting a blob into the zone.  It is up to registrars
to register the referral URI with registries, or block the access to
updating DS and NS.  
</t>
</section> 
<section title="Security considerations"> 
<t>
TBD</t>
</section> 

<section title="IANA Actions"> 
<t> URI ??? TBD </t> 
</section>
<section title="Internationalization Considerations">
<t> This protcol is designed for machine to machine communications </t> 
</section> 
</middle>

<back> 
  <references title="Normative References">
      &rfc2119;
    </references>

    <references title="Informative References">
      &rfc2845;
    </references>

<section title="Document History"> 
<t> First version</t> 
</section> 
</back>
</rfc> 

